
Introduction
-------------------
EigenBench is a simple synthetic benchmark for Transactional Memory 
systems. In our approach, we define the following eight orthogonal 
TM characteristics: {concurrency, transaction length, workingset size, 
temporal locality, pollution, contention, predominance, and density}.
EigenBench allows the users to explore each of above TM characteristic, 
independently. For more detailed explanation, please refer to [1].

If you use EigenBench in your work, please cite [1]. 

Thank you for using EigenBench.

Package Contents
---------------------
The distribution package contains following items:

    README ---------- This file
    LICENSE --------- BSD-style license; if you use Eigenbench, please let us know
    VERSIONS -------- Revision history
    src\ ------------ Source codes for EigenBench
    scripts\ -------- Sample EigenBench scripts that have been used in [1].
       orthogonal\ -- Orthogonal analysis
       pathology\ --- Pathology generation
       stamp_mimic\ - Mimicry of STAMP benchmarks
       mixed\ ------- Example Mixed Transactions

Each subdirectory contains a README file inside.


Applying EigenBench for your TM system
-----------------------------------
EigenBench uses the same TM API as used by STAMP [2] -- the user should
provide a certain set of C Macros that maps TM accesses with his/her
own implementation. We provide example API implementations for two STMs
TL2 [3] and SwissTM [4] in the src directory. EigenBench also have
been applied to a HTM desgin [5] and a Hybrid-TM design [6].


The main usage of EigenBench would be the orthogonal overhead analysis
as in [1]. One can start with a typical set of transaction characteristics
of his/her interest (i.e. the typical transaction in his/her applications) and 
vary each characteristics one at a time. At a minimum, one should explore
working-set size, transaction length, pollution and scalability in
the non-conflicting setting, while comparing the result with the 'unprotected'
execution, which will reveal the 'overhead' induced by TM systems. 
Next, performance under contention can be explored as shown in [1], while  
measured rollback rates could be compared against estimated true degree
from the analytic model in [1].

Optionally, one may also test TM system performance under pathological 
transactions generated by EigenBench parameters. The user can observe
the reported rollback rates or execution time to recognize pathology
signature, or use the same visualization technique as we used in [1].

Also optionally, one may explore his/her TM performance using various
sets of mixed transactions. This is based on the observation that some
applications exhibit continuous distributions of TM characteristics, 
rather than single conspicuous value. We provide a few interesting
mixtures in this package.

We expect the above EigenBench analyses give enough information to explain
a certain TM application's performance under given TM system. However, 
one should also check if the application performance is governed 
by non-TM aspects such as Amdhal limit or thread synchronization outside TX.

Please refer to [1] for detailed explanation.


References
---------------------
[1] S. Hong, T. Oguntebi, J. Casper, N.Bronson, C. Kozyrakis, and K.Olukotun.
    EigenBench: A Simple Exploration Tool for Orthogonal TM Characteristics
    In IIWSC '10: Proceedings of The IEEE International Symposium on Workload
    Characterization, December 2010.

[2] C. Cao Minh, J. Chung, C. Kozyrakis, and K. Olukotun. STAMP: Stanford 
    Transactional Applications for Multi-processing. In IISWC '08: Proceedings
    of The IEEE International Symposium on Workload Characterization,
    September 2008. 

[3] D. Dice, O. Shalev, and N. Shavit. Transactional Locking II. In
    Proceedings of the 20th International Symposium on Distributed Computing
    (DISC), 2006.

[4] A. Dragovic, R. Guerraoui, and M. Kapalka. Stretching Transactional Memory.
    In Proceedings of the 2009 ACM SIGPLAN conference on Programming
    Language Design and Implementation (PLDI), 2009.

[5] C. Thacker.  Hardware transactional memory for Beehive. Microsoft
    Research, 2010.

[6] J. Casper, T. Oguntebi, S. Hong, N. Bronson, C. Kozyrakis, and K.Olukotun.
    Hardware Acceleration of Transactional Memory on Commodity Systems.
    In Proceedings of 16th international conference on Architectural Support for
    Programing Lanaguages and Operating Systems (ASPLOS), 2011 (to appear)


Contact Information
---------------------
webpage ---- http://stamp.stanford.edu
emailto ---- eigenbench_manager@lists.stanford.edu

